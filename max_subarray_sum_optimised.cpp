/*
Print the max sum of the possible subarrays of an array.
Approach is to eliminate the third (inner most) loop by applying cumulative sum to find the sum of the subarray.
O(n^2).
*/

#include <iostream>
using namespace std;
int main() {
    int n,ar[100],cumSum[100],maxSum=0,currSum,left,right;
    cin>>n;

    // Building the cumulative sum array along with taking the input
    cin>>ar[0];
    cumSum[0] = ar[0];
    for(int i=1;i<n;i++){
        cin>>ar[i];
        cumSum[i] = cumSum[i-1] + ar[i];
    }

    // Finding the max sum
    for(int i=0;i<n;i++){
        for(int j=i;j<n;j++){
            currSum = cumSum[j] - cumSum[i-1];

            if(currSum > maxSum){
                maxSum = currSum;
                left = i;
                right = j;
            }
        }
    }

    // Displaying the result
    cout<<"Max sum is : "<<maxSum<<endl;
    cout<<"Generated by subarray : ";
    for(int i=left;i<=right;i++){
        cout<<ar[i]<<" ";
    }
}
